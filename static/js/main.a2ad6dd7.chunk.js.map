{"version":3,"sources":["App.js","index.js"],"names":["App","webcamRef","useRef","canvasRef","names","runModel","a","tf","net","console","log","setInterval","detect","current","video","readyState","videoWidth","videoHeight","width","height","img","fromPixels","processed","resizeBilinear","div","expandDims","executeAsync","obj","boxes","scores","classes","valid_detections","boxes_data","dataSync","scores_data","classes_data","valid_detections_data","c","ctx","getContext","i","slice","x1","y1","x2","y2","klass","score","toFixed","strokeStyle","lineWidth","strokeRect","fillStyle","textWidth","measureText","textHeight","parseInt","fillRect","fillText","useEffect","className","ref","videoConstraints","facingMode","muted","style","position","marginLeft","marginRight","left","right","textAlign","zindex","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a2ad6dd7.chunk.js","sourcesContent":["// Import dependencies\nimport React, { useRef, useEffect } from \"react\";\nimport * as tf from \"@tensorflow/tfjs\";\nimport Webcam from \"react-webcam\";\nimport \"./App.css\";\n\nfunction App() {\n\tconst webcamRef = useRef(null);\n\tconst canvasRef = useRef(null);\n\n\tconst names = [\"incorrectly\", \"mask\", \"nomask\"];\n\tconst font = \"16px sans-serif\";\n\n\tconst videoConstraints = {\n\t\twidth: 1080,\n\t\theight: 720,\n\t\tfacingMode: \"user\",\n\t};\n\n\tconst runModel = async () => {\n\t\tconst net = await tf.loadGraphModel(\"./web_model/model.json\");\n\t\tconsole.log(net);\n\n\t\t//  Loop and detect face\n\t\tsetInterval(() => {\n\t\t\tdetect(net);\n\t\t}, 10);\n\t};\n\n\tconst detect = async (net) => {\n\t\t// Check data is available\n\t\tif (\n\t\t\ttypeof webcamRef.current !== \"undefined\" &&\n\t\t\twebcamRef.current !== null &&\n\t\t\twebcamRef.current.video.readyState === 4\n\t\t) {\n\t\t\t// Get Video Properties\n\t\t\tconst video = webcamRef.current.video;\n\t\t\tconst videoWidth = webcamRef.current.video.videoWidth;\n\t\t\tconst videoHeight = webcamRef.current.video.videoHeight;\n\n\t\t\t// Set video width\n\t\t\twebcamRef.current.video.width = videoWidth;\n\t\t\twebcamRef.current.video.height = videoHeight;\n\n\t\t\t// Set canvas height and width\n\t\t\tcanvasRef.current.width = videoWidth;\n\t\t\tcanvasRef.current.height = videoHeight;\n\n\t\t\t// Make detections\n\t\t\tconst img = tf.browser.fromPixels(video); // take img from the camera\n\t\t\tconst processed = tf.image\n\t\t\t\t.resizeBilinear(img, [320, 320])\n\t\t\t\t.div(255.0) // normalize\n\t\t\t\t.expandDims(0);\n\t\t\tconst obj = await net.executeAsync(processed);\n\n\t\t\tconst [boxes, scores, classes, valid_detections] = obj;\n\t\t\tconst boxes_data = boxes.dataSync();\n\t\t\tconst scores_data = scores.dataSync();\n\t\t\tconst classes_data = classes.dataSync();\n\t\t\tconsole.log(classes_data[0]);\n\t\t\tconst valid_detections_data = valid_detections.dataSync()[0];\n\n\t\t\ttf.dispose(obj);\n\n\t\t\t// Draw code below\n\t\t\tconst c = canvasRef.current;\n\t\t\tconst ctx = c.getContext(\"2d\");\n\n\t\t\tvar i;\n\t\t\tfor (i = 0; i < valid_detections_data; ++i) {\n\t\t\t\tlet [x1, y1, x2, y2] = boxes_data.slice(i * 4, (i + 1) * 4);\n\t\t\t\tx1 *= c.width;\n\t\t\t\tx2 *= c.width;\n\t\t\t\ty1 *= c.height;\n\t\t\t\ty2 *= c.height;\n\t\t\t\tconst width = x2 - x1;\n\t\t\t\tconst height = y2 - y1;\n\t\t\t\tconst klass = names[classes_data[i]];\n\t\t\t\tconst score = scores_data[i].toFixed(2);\n\n\t\t\t\t// Draw the bounding box.\n\t\t\t\tctx.strokeStyle = \"#00FFFF\";\n\t\t\t\tctx.lineWidth = 4;\n\t\t\t\tctx.strokeRect(x1, y1, width, height);\n\n\t\t\t\t// Draw the label background.\n\t\t\t\tctx.fillStyle = \"#00FFFF\";\n\t\t\t\tconst textWidth = ctx.measureText(klass + \":\" + score).width;\n\t\t\t\tconst textHeight = parseInt(font, 10); // base 10\n\t\t\t\tctx.fillRect(x1, y1, textWidth + 4, textHeight + 4);\n\t\t\t}\n\t\t\tfor (i = 0; i < valid_detections_data; ++i) {\n\t\t\t\tlet [x1, y1, ,] = boxes_data.slice(i * 4, (i + 1) * 4);\n\t\t\t\tx1 *= c.width;\n\t\t\t\ty1 *= c.height;\n\t\t\t\tconst klass = names[classes_data[i]];\n\t\t\t\tconst score = scores_data[i].toFixed(2);\n\n\t\t\t\t// Draw the text last to ensure it's on top.\n\t\t\t\tctx.fillStyle = \"#000000\";\n\t\t\t\tctx.fillText(klass + \":\" + score, x1, y1 + 13);\n\t\t\t}\n\n\t\t\ttf.dispose(boxes);\n\t\t\ttf.dispose(scores);\n\t\t\ttf.dispose(classes);\n\t\t\ttf.dispose(valid_detections);\n\t\t\ttf.dispose(img);\n\t\t\ttf.dispose(processed);\n\t\t\ttf.dispose(boxes_data);\n\t\t\ttf.dispose(scores_data);\n\t\t\ttf.dispose(classes_data);\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\trunModel();\n\t}, []);\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<h1>Real Time Mask Detection with yolov5 and Tensorflow JS</h1>\n\t\t\t<div className=\"App-header\">\n\t\t\t\t<Webcam\n\t\t\t\t\tclassName=\"webcam\"\n\t\t\t\t\tref={webcamRef}\n\t\t\t\t\tvideoConstraints={videoConstraints}\n\t\t\t\t\tmuted={true}\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tposition: \"absolute\",\n\t\t\t\t\t\tmarginLeft: \"auto\",\n\t\t\t\t\t\tmarginRight: \"auto\",\n\t\t\t\t\t\tleft: 0,\n\t\t\t\t\t\tright: 0,\n\t\t\t\t\t\ttextAlign: \"center\",\n\t\t\t\t\t\tzindex: 9,\n\t\t\t\t\t}}\n\t\t\t\t/>\n\n\t\t\t\t<canvas\n\t\t\t\t\tclassName=\"canvas\"\n\t\t\t\t\tref={canvasRef}\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tposition: \"absolute\",\n\t\t\t\t\t\tmarginLeft: \"auto\",\n\t\t\t\t\t\tmarginRight: \"auto\",\n\t\t\t\t\t\tleft: 0,\n\t\t\t\t\t\tright: 0,\n\t\t\t\t\t\ttextAlign: \"center\",\n\t\t\t\t\t\tzindex: 8,\n\t\t\t\t\t\twidth: 1080,\n\t\t\t\t\t\theight: 720,\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}